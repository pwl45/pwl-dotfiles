#+TITLE:Paul's GNU Emacs Config
#+AUTHOR: Paul Lapey
#+DESCRIPTION: Paul's personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2
* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-scripts-directory-to-path][Adding scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#evil-packages][Evil Packages]]
  - [[#keybindings][Keybindings]]
- [[#gui][GUI]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#fonts][FONTS]]
  - [[#theme][THEME]]
  - [[#splash-screen][Splash Screen]]
  - [[#highlight-todo][HIGHLIGHT TODO]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#modeline][MODELINE]]
  - [[#diminish][DIMINISH]]
  - [[#rainbow-delimiters][RAINBOW Delimiters]]
  - [[#dashboard][DASHBOARD]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars, and Scrollbars]]
- [[#misc][MISC]]
  - [[#misc-variables][Misc. Variables]]
  - [[#backup][BACKUP]]
  - [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#minibuffer-escape][MINIBUFFER ESCAPE]]
  - [[#dired][DIRED]]
- [[#company][COMPANY]]
- [[#helm][HELM]]
- [[#fzf][FZF]]
- [[#flycheck][FLYCHECK]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#nice-keybindings][Nice Keybindings]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#evil-org][Evil-org]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org-Tempo]]
- [[#projectile][PROJECTILE]]
- [[#which-key][WHICH-KEY]]
- [[#language-integration-lsp-treesitter][Language Integration LSP, Treesitter]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Adding scripts directory to path 
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/setup_scripts")
#+end_src
** Sourcing the scripts
#+begin_src emacs-lisp
;; Elpaca package manager!
(require 'elpaca-setup)
;; Move buffers around!
;; (require 'buffer-move)
#+end_src
** Load Evil Mode
#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode)
  )
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-undo-system 'undo-tree)

  (evil-mode)
  )
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashhboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
;;(with-eval-after-load 'evil-maps
;;(define-key evil-motion-state-map (kbd "SPC") nil)
;;(define-key evil-motion-state-map (kbd "RET") nil)
;;(define-key evil-motion-state-map (kbd "TAB") nil)
;;)


;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;; (elpaca nil (message "deferred"))
#+end_src
** Evil Packages
Vim has lots of great packages. Many of them have good emacs counterparts/emulations.
#+begin_src emacs-lisp
(use-package evil-commentary
  :config
  (setq evil-commentary-mode t)
  )
#+end_src
** Keybindings 
*** Basic Keybindings 
*** Keybindings with General
#+begin_src emacs-lisp

(defun home-manager-switch () (interactive)
       (shell-command-to-string "home-manager switch --flake $HOME/pwl-dotfiles"))

(defun dispatch-and-notify (func)
  "Dispatch FUNC, messaging start, success, or failure."
  (interactive)
  (message "Starting %s" (symbol-name func))
  (condition-case err
      (progn
        (funcall func)
        (message "%s completed successfully" (symbol-name func)))
    (error
     (message "Execution of %s failed: %s" (symbol-name func) (error-message-string err)))))
(use-package general
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer pwl/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; Basic QOL maps
  (pwl/leader-keys
    "wq" '((lambda () (interactive) (save-buffer) (kill-emacs)) :wk "Write and quit")
    )


  ;; Buffer Navigation
  (pwl/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "fc" '((lambda () (interactive) (find-file "~/pwl-dotfiles/emacs/config.org")) :wk "Edit emacs config")
    "fr" '(counsel-recentf :wk "Find recent files")
    "ff" '(helm-multi-files :wk "Fuzzy find files in helm")
    "fg" '(helm-rg :wk "rip grep for files with helm")
    "rg" '(helm-rg :wk "rip grep for files with helm")
    "TAB TAB" '(comment-line :wk "Comment lines")
    )

  ;; Buffer Navigation
  (pwl/leader-keys
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bi" '(ibuffer :wk "Ibuffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "bl" '((lambda () (interactive) (switch-to-buffer (other-buffer (current-buffer) 1))) :wk "Last buffer")
    "br" '(revert-buffer :wk "Reload buffer")

    )

  ;; elisp evaluation
  (pwl/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "eb" '(eval-buffer :wk "Evaluate elisp in buffer")
    "ed" '(eval-defun :wk "Evaluate defun containing or after point")
    "ee" '(eval-defun :wk "Evaluate elisp expression")
    "el" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "er" '(eval-last-sexp :wk "Evaluate elisp in region"))


  ;; help
  (pwl/leader-keys
    "h" '(:ignore t :wk "Help")
    "hf" '(describe-function :wk "Describe function")
    "hv" '(describe-variable :wk "Describe variable")
    "hb" '(describe-bindings :wk "Describe bindings")
    "hs" '((lambda () (interactive) (dispatch-and-notify 'home-manager-switch)):wk "Run home-manager switch")
    "hrr" '((lambda () (interactive) 
              (load-file user-init-file)
              (ignore (elpaca-process-queues)) )
            :wk "Reload emacs config")
    )

  (pwl/leader-keys
    "R" '((lambda () (interactive) 
            (message "Starting home-manager-switch")
            (home-manager-switch)
            (message "done... reloading config")
            (load-file user-init-file)
            (message "done")
            (ignore (elpaca-process-queues)) )
          :wk "Reload emacs config")
    )
  ;; window movement
  (pwl/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  (pwl/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (pwl/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (pwl/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (pwl/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d p" '(peep-dired :wk "Peep-dired"))

  (defun save-and-escape ()
    "Save the buffer and escape from the current mode."
    (interactive)
    (save-buffer)
    (evil-normal-state))

  (general-define-key
   :states '(normal insert visual)
   "C-SPC" 'save-and-escape)

  ;; Simple remaps for normal mode
  (general-define-key
   :states 'normal
   "Q" 'evil-lookup
   "J" 'evil-forward-paragraph
   "K" 'evil-backward-paragraph
   "H" 'evil-first-non-blank
   "L" 'evil-end-of-line
   "j" 'evil-next-visual-line
   "k" 'evil-previous-visual-line
   )

  (defun insert-org-checkbox-below ()
    (interactive)
    (let ((current-indentation (current-indentation)))
      (end-of-line)
      (newline)
      (indent-to current-indentation)
      (insert "- [ ] ")
      (evil-insert-state)
      ))

  (with-eval-after-load 'org
    ;; Set keybindings for org-mode specific actions in Evil insert mode
    (general-def :states 'insert :keymaps 'org-mode-map
      "M-h" 'org-promote-subtree
      "M-l" 'org-demote-subtree
      "M-c" 'insert-org-checkbox-below
      )
    (general-def :states 'normal :keymaps 'org-mode-map
      "M-h" 'org-promote-subtree
      "M-l" 'org-demote-subtree)
    (general-def :states 'normal :keymaps 'org-mode-map
      "M-h" 'org-promote-subtree
      "M-l" 'org-demote-subtree
      "<<" 'org-promote-subtree
      ">>" 'org-demote-subtree
      "M-c" 'insert-org-checkbox-below
      )
    )

  ;; Simple remaps for visual mode
  (general-define-key
   :states 'visual
   "H" 'evil-first-non-blank
   "L" 'evil-end-of-line)

  ;; S - substitute command skeleton and move the cursor between the two slashes
  ;; this is annoyingly difficult, have to do minibuffer-with-setup-hook
  (general-define-key
   :states 'normal
   :keymaps 'override
   "S" (lambda ()
	 (interactive)
	 (minibuffer-with-setup-hook
             (lambda () (backward-char 2))
           (evil-ex "%s//g"))
	 )
   )

  (general-define-key
   :states 'visual
   :keymaps 'override
   "S" (lambda ()
	 (interactive)
	 (minibuffer-with-setup-hook
             (lambda () (backward-char 2))
           (evil-ex "'<,'>s//g")
           )
	 )
   )

  ;; nnoremap c "_c
  (defvar my/original-evil-change-command (lookup-key evil-normal-state-map "c"))
  (defun my/evil-change-to-blackhole ()
    (interactive)
    (let ((evil-this-register ?_))
      (call-interactively my/original-evil-change-command)))
  (general-define-key
   :states '(normal visual)
   "c" 'my/evil-change-to-blackhole)

  ;; nnoremap C "_C
  (defvar my/original-evil-change-to-end-of-line-command (lookup-key evil-normal-state-map "C"))
  (defun my/evil-change-to-end-of-line-to-blackhole ()
    (interactive)
    (let ((evil-this-register ?_))
      (call-interactively my/original-evil-change-to-end-of-line-command)))
  (general-define-key
   :states '(normal visual)
   "C" 'my/evil-change-to-end-of-line-to-blackhole)
  (defun evil-change-blackhole (beg end &optional type register yank-handler)
    "Change text from BEG to END with TYPE without affecting the clipboard.
   Works like `evil-change' but does not modify the kill-ring."
    (interactive "r")
    (let ((kill-ring (cons "" kill-ring))
          (kill-ring-yank-pointer kill-ring))
      (evil-change beg end type register yank-handler)))


  ;; (with-eval-after-load 'evil-maps
  ;;   (define-key evil-normal-state-map "c" 'evil-change-blackhole)
  ;;   (define-key evil-visual-state-map "c" 'evil-change-blackhole))

  ;; (general-nmap "c" (general-key-dispatch 'evil-change
  ;;                     "ow" 'toggle-word-wrap
  ;;                     "." (lambda () (interactive) (evil-change-blackhole (point) (progn (evil-find-char 1 ?.) (point))))
  ;;                     ";" (lambda () (interactive) (evil-change-blackhole (point) (progn (evil-find-char 1 ?\;) (point))))
  ;;                     ":" (lambda () (interactive) (evil-change-blackhole (point) (progn (evil-find-char 1 ?\:) (point))))
  ;;                     ;; "c" 'evil-change-whole-line
  ;;                     ;; alternatively if there was no linewise version:
  ;;                     "c" (general-simulate-key ('evil-change "c"))))

  )
#+end_src

* GUI
Making GNU Emacs look a little better.

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** FONTS
Defining the various fonts that Emacs will use
*** Setting The Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 110
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Ubuntu"
                    :height 120
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 110
                    :weight 'medium)

;; Makes commented text and keywords italics
;; This works in emacsclient but not emacs
;; Your font must have an italic face available
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

(setq-default lin-spacing 0.12)

#+end_src
*** Zooming In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
*** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+end_src
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** THEME
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
#+end_src
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-acario-dark t)

  ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Splash Screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
** HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src
** RAINBOW MODE
Show hex colors!
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)

#+end_src
** MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src
** DIMINISH
Gives you the ability to disable showing modes in the modeline.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** RAINBOW Delimiters
Adding rainbow coloring to parens
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
	 (clojure-mode . rainbow-delimiters-mode)))
#+end_src
** DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  ;;(setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
(setq inhibit-startup-screen t)
#+end_src
** Disable Menubar, Toolbars, and Scrollbars
#+begin_src emacs-lisp
;; warning: the order of these two lines matters, for some reason
;; sometimes there's a blank space at the top if you turn off the menu bar mode first
(tool-bar-mode -1)
(menu-bar-mode -1)

(scroll-bar-mode -1)
#+end_src

* MISC
Unimportant things that are helpful, improve quality of life, etc.
** Misc. Variables
#+begin_src emacs-lisp
;; Scroll one line at a time
(setq scroll-step 1)
(setq scroll-conservatively 10000)

;; make word mappings go past underscore
;; ciw diw cw dw, etc.
(modify-syntax-entry ?_ "w")
(add-hook 'prog-mode-hook
          (lambda ()
            (modify-syntax-entry ?_ "w")))

;; fill in closing things
(electric-pair-mode)

#+end_src
** BACKUP
Make emacs store its clutter-y backup files in the trash
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.Trash")))
#+end_src
** SHELLS AND TERMINALS
** Eshell
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src
** MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC thre times to quite the minibuffer. Change this to only once.
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src
** DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

;; (use-package peep-dired
;;   :after dired
;;   :hook (evil-normalize-keymaps . peep-dired-hook)
;;   :config
;;   (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
;;   (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
;;   (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
;;   (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
;;   )

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

#+end_src

* COMPANY 
#+begin_src emacs-lisp
(defun my/company-complete-or-newline ()
  "Complete the selection if a company suggestion is highlighted, otherwise insert a newline."
  (interactive)
  (if (and (company-manual-begin) company-selection-changed)
      (company-complete-selection)
    (newline)))

(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .05)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
  (company-tng-mode t)
  :config
  (define-key company-active-map (kbd "RET") #'my/company-complete-or-newline)
  (define-key company-active-map [return] #'my/company-complete-or-newline)
  (add-to-list 'company-backends 'company-dabbrev-code)
  (setq company-dabbrev-code-ignore-case t)
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-code-modes t)
  (setq company-dabbrev-code-other-buffers 'all)

  )


;; (with-eval-after-load 'company


(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src
* HELM
#+begin_src emacs-lisp
(use-package helm
  :ensure t  ; Make sure the package is installed automatically
  :init
  ;; You can set Helm-specific initialization settings here
  :config
  ;; (require 'helm-config)  ; Load Helm configuration

  ;; Set Helm as the default completion mechanism
  (helm-mode 1)
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)

  ;; Bind the Helm command to a key combination, e.g., "C-x C-f" for `helm-find-files`
  ;; (global-set-key (kbd "C-x C-f") #'helm-find-files)
  ;; (global-set-key (kbd "M-x") #'helm-M-x)
  ;; (global-set-key (kbd "C-x b") #'helm-buffers-list)
  ;; ... and other key bindings as needed

  ;; You can customize Helm further using `setq` and other configuration commands
  )
(use-package helm-rg
  :ensure t  ; Automatically install the package if not already installed
  :config
  ;; Optional: put any configuration you want to execute after helm-rg is loaded
  )


#+end_src
* FZF
#+begin_src emacs-lisp
(use-package fzf
  :bind
  ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))
#+end_src
* FLYCHECK
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands
+ Ivy-rich allows us to add descriptions alongside the commands in m-x
#+begin_src emacs-lisp
(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :diminish
  :config
  (ivy-mode))

(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

(use-package all-the-icons-ivy-rich
  :ensure t
  :diminish
  :init (all-the-icons-ivy-rich-mode 1))

#+end_src
* ORG MODE
** Nice Keybindings
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


** Evil-org
Org mode 
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src>
** Disable Electric Indent
Electric indent behaves weirdly in org mode. Let's turn it off for org-mode but on otherwise.
#+begin_src emacs-lisp
;; ;; Enable electric indent globally
(electric-indent-mode 1)

;; Disable electric indent in org-mode by adding a hook
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
(setq org-edit-src-content-indentation 0)

#+end_src

** Org-Tempo
insert mode keychords for creating blocks. <s followed by TAB creates a source code block, for example
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
* PROJECTILE
#+begin_src emacs-lisp
(use-package projectile
  ;;:diminish
  :init
  (projectile-mode +1)
  :config
  (setq projectile-project-search-path '("~"))
  )

#+end_src
* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src
* Language Integration LSP, Treesitter 
#+begin_src emacs-lisp
;; This is required for nix-mode, for some reason. 
;; (use-package seq
;;   :ensure t
;;   ;; :defer t
;;   :pin melpa-stable
;;   :ensure-system-package (seq . "version-2.24"))

(use-package nix-mode
  :mode "\\.nix\\'")

(use-package rust-mode
  :ensure t)


(use-package terraform-mode
  :ensure t
  :mode (("\\.tf\\'" . terraform-mode)
         ("\\.tf\\.erb\\'" . terraform-mode)))
;;(use-package ruby-mode)
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook ((python-mode . lsp-deferred)  ;; LSP start automatically for Python
         (rust-mode . lsp-deferred)    ;; And for Rust
         (cc-mode . lsp-deferred)    ;; And for C/C++
         (js-mode . lsp-deferred)        ;; And for JavaScript
         (terraform-mode . lsp-deferred) ;; And for Terraform
         (ruby-mode . lsp-deferred) ;; And for ruby
         ;; Add other major modes that you want LSP to support
         )
  :config
  (setq lsp-enable-symbol-highlighting t)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-auto-guess-root t)
  (setq +format-with-lsp nil)
  (setq lsp-enable-indentation nil)
  (setq lsp-enable-on-type-formatting nil)
  )
;; You can adjust LSP settings here

(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

;; bad idea
(setq warning-minimum-level :error)
#+end_src
